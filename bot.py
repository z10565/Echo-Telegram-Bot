import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.types.input_file import FSInputFile
from config_reader import config
from PIL import Image, ImageOps

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=config.bot_token.get_secret_value())
dp = Dispatcher()

SAVE_DIR = "saved_photos"
os.makedirs(SAVE_DIR, exist_ok=True)

def apply_grayscale(image_path):
    img = Image.open(image_path)
    grayscale_img = img.convert("L") 
    grayscale_path = os.path.splitext(image_path)[0] + "_grayscale.jpg"
    grayscale_img.save(grayscale_path)
    return grayscale_path

def apply_negative(image_path):
    img = Image.open(image_path)
    negative_img = ImageOps.invert(img.convert("RGB"))  
    negative_path = os.path.splitext(image_path)[0] + "_negative.jpg"
    negative_img.save(negative_path)
    return negative_path

@dp.message(Command("start"))
async def cmd_start(message: Message):
    user = message.from_user
    username = user.username if user.username else user.first_name
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç {username}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç–∞–∫–∂–µ —è –º–æ–≥—É –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Ñ–æ—Ç–æ. \n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è —Å–¥–µ–ª–∞—é –µ—ë —á–µ—Ä–Ω–æ-–±–µ–ª–æ–π –∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–π.")
    
@dp.message(F.text)
async def echo(message: Message):
    if not message.text.startswith('/'):
        await message.answer(message.text)
        
@dp.message(F.photo)
async def handle_photo(message: Message):
    try:
        photo = message.photo[-1]
        file_id = photo.file_id
        file = await bot.get_file(file_id)

        file_extension = os.path.splitext(file.file_path)[1] or ".jpg"
        file_path = os.path.abspath(os.path.join(SAVE_DIR, f"{file_id}{file_extension}"))

        await bot.download_file(file.file_path, destination=file_path)
        logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ –ø—É—Ç–∏: {file_path}")

        grayscale_path = apply_grayscale(file_path)
        input_file_grayscale = FSInputFile(grayscale_path)
        await bot.send_photo(chat_id=message.chat.id, photo=input_file_grayscale, caption="–í–æ—Ç –≤–∞—à–µ —Ñ–æ—Ç–æ –≤ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ!")

        negative_path = apply_negative(file_path)
        input_file_negative = FSInputFile(negative_path)
        await bot.send_photo(chat_id=message.chat.id, photo=input_file_negative, caption="–ê –≤–æ—Ç –æ–Ω–æ –≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º —Ñ–∏–ª—å—Ç—Ä–µ!")

    except Exception as e:
        logger.error(f"Error in handle_photo: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")

@dp.message(F.document)
async def echo_file(message: Message):
    try:
        document = message.document
        file_id = document.file_id
        await bot.send_document(chat_id=message.chat.id, document=file_id, caption="–í–æ—Ç –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç!")
    except Exception as e:
        logger.error(f"Error in echo_file: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")

async def main():
    logger.info("Start polling")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
